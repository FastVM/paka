

## def huffman_gen_table(tree) {
##     ret = []
##     next = tree
##     while length(next) != 0 {
##         cur = next
##         next = []
##         i = 0
##         while i < length(cur) {
##             item = cur[i]
##             if type(item) == type(0) {
##                 ret ~= [item]
##             } else {
##                 next ~= item
##             }
##             i = i + 1
##         }
##     }
##     return ret
## }

def huffman_gen_table_bits(tree, out, maxdept, depth, path) {
    if depth == maxdept {
        if type(tree) == type(0) {
            out ~= [[tree, path]]
        }
        return 1
    }
    if type(tree) == type(0) {
        return 0
    } else {
        n1 = huffman_gen_table_bits(tree[0], out, maxdept, depth + 1, path ~ [0])
        n2 = huffman_gen_table_bits(tree[1], out, maxdept, depth + 1, path ~ [1])
        return n1 + n2
    }
}

def huffman_gen_table(tree) {
    ret = []
    iters = 0
    while true {
        n = huffman_gen_table_bits(tree, ret, iters, 0, [])
        if n == 0 {
            return ret
        }
        iters = iters + 1
    }
}
