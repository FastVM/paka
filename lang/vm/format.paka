
import("./opcode.paka")

macro opcode.arg {
    reg
    regs
    label
    num
    nums
}

def vm_opcode_value(op) {
    if op == "exit"{
        return opcode.do_exit
    }
    if op == "reg"{
        return opcode.do_store_reg
    }
    if op == "none"{
        return opcode.do_store_none
    }
    if op == "bool"{
        return opcode.do_store_bool
    }
    if op == "int"{
        return opcode.do_store_int
    }
    if op == "jump"{
        return opcode.do_jump
    }
    if op == "func"{
        return opcode.do_func
    }
    if op == "add"{
        return opcode.do_add
    }
    if op == "sub"{
        return opcode.do_sub
    }
    if op == "mul"{
        return opcode.do_mul
    }
    if op == "div"{
        return opcode.do_div
    }
    if op == "mod"{
        return opcode.do_mod
    }
    if op == "call"{
        return opcode.do_static_call
    }
    if op == "ret"{
        return opcode.do_return
    }
    if op == "putchar"{
        return opcode.do_putchar
    }
    if op == "str"{
        return opcode.do_string_new
    }
    if op == "length"{
        return opcode.do_length
    }
    if op == "get"{
        return opcode.do_index_get
    }
    if op == "set"{
        return opcode.do_index_set
    }
    if op == "type"{
        return opcode.do_type
    }
    if op == "exec"{
        return opcode.do_exec
    }
    if op == "save"{
        return opcode.do_save
    }
    if op == "dump"{
        return opcode.do_dump
    }
    if op == "read"{
        return opcode.do_read
    }
    if op == "write"{
        return opcode.do_write
    }
    if op == "dcall"{
        return opcode.do_dynamic_call
    }
    if op == "arr"{
        return opcode.do_static_array_new
    }
    if op == "cat"{
        return opcode.do_static_concat
    }
    if op == "call0"{
        return opcode.do_static_call0
    }
    if op == "call1"{
        return opcode.do_static_call1
    }
    if op == "call2"{
        return opcode.do_static_call2
    }
    if op == "call3"{
        return opcode.do_static_call3
    }
    if op == "beq"{
        return opcode.do_branch_equal
    }
    if op == "bneq"{
        return opcode.do_branch_not_equal
    }
    if op == "blt"{
        return opcode.do_branch_less
    }
    if op == "bgt"{
        return opcode.do_branch_greater
    }
    if op == "blte"{
        return opcode.do_branch_less_than_equal
    }
    if op == "bgte"{
        return opcode.do_branch_greater_than_equal
    }
    if op == "bb"{
        return opcode.do_branch_bool
    }
    if op == "inc"{
        return opcode.do_inc
    }
    if op == "dec"{
        return opcode.do_dec
    }
    if op == "beqi"{
        return opcode.do_branch_equal_int
    }
    if op == "bneqi"{
        return opcode.do_branch_not_equal_int
    }
    if op == "blti"{
        return opcode.do_branch_less_int
    }
    if op == "bgti"{
        return opcode.do_branch_greater_int
    }
    if op == "bltei"{
        return opcode.do_branch_less_than_equal_int
    }
    if op == "bgtei" {
        return opcode.do_branch_greater_than_equal_int 
    }
}

def vm_opcode_args(op) {
    if op == opcode.do_exit {
        return []
    }
    if op == opcode.do_store_reg {
        return [opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_store_none {
        return [opcode.arg.reg]
    }
    if op == opcode.do_store_bool {
        return [opcode.arg.reg, opcode.arg.num]
    }
    if op == opcode.do_store_int {
        return [opcode.arg.reg, opcode.arg.num]
    }
    if op == opcode.do_store_reg {
        return [opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_jump {
        return [opcode.arg.label]
    }
    if op == opcode.do_func {
        return [opcode.arg.label]
    }
    if op == opcode.do_add {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_sub {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_mul {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_div {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_mod {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_static_call {
        return [opcode.arg.reg, opcode.arg.label, opcode.arg.regs]
    }
    if op == opcode.do_return {
        return [opcode.arg.reg]
    }
    if op == opcode.do_putchar {
        return [opcode.arg.reg]
    }
    if op == opcode.do_string_new {
        return [opcode.arg.reg, opcode.arg.nums]
    }
    if op == opcode.do_length {
        return [opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_index_get {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_index_set {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_type {
        return [opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_exec {
        return [opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_save {
        return [opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_dump {
        return [opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_read {
        return [opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_write {
        return [opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_dynamic_call {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.regs]
    }
    if op == opcode.do_static_array_new {
        return [opcode.arg.reg, opcode.arg.regs]
    }
    if op == opcode.do_static_concat {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_static_call0 {
        return [opcode.arg.reg, opcode.arg.label]
    }
    if op == opcode.do_static_call1 {
        return [opcode.arg.reg, opcode.arg.label, opcode.arg.reg]
    }
    if op == opcode.do_static_call2 {
        return [opcode.arg.reg, opcode.arg.label, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_static_call3 {
        return [opcode.arg.reg, opcode.arg.label, opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_branch_equal {
        return [opcode.arg.reg, opcode.arg.label, opcode.arg.reg, opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_branch_not_equal {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_less {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_greater {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_less_than_equal {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_greater_than_equal {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_bool {
        return [opcode.arg.reg, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_inc {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.num]
    }
    if op == opcode.do_dec {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.num]
    }
    if op == opcode.do_branch_equal_int {
        return [opcode.arg.reg, opcode.arg.num, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_not_equal_int {
        return [opcode.arg.reg, opcode.arg.num, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_less_int {
        return [opcode.arg.reg, opcode.arg.num, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_greater_int {
        return [opcode.arg.reg, opcode.arg.num, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_less_than_equal_int {
        return [opcode.arg.reg, opcode.arg.num, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_greater_than_equal_int {
        return [opcode.arg.reg, opcode.arg.num, opcode.arg.label, opcode.arg.label]
    }
}