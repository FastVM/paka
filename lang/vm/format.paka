
import("./opcode.paka")

macro opcode.arg {
    reg
    regs
    label
    num
    nums
}

def vm_opcode_value(op) {
    if str.eq(op, "exit") {
        return opcode.do_exit
    }
    if str.eq(op, "reg") {
        return opcode.do_store_reg
    }
    if str.eq(op, "none") {
        return opcode.do_store_none
    }
    if str.eq(op, "bool") {
        return opcode.do_store_bool
    }
    if str.eq(op, "int") {
        return opcode.do_store_int
    }
    if str.eq(op, "global") {
        return opcode.do_load_global
    }
    if str.eq(op, "swap") {
        return opcode.do_swap_reg
    }
    if str.eq(op, "geti") {
        return opcode.do_index_set_int
    }
    if str.eq(op, "seti") {
        return opcode.do_index_set_int
    }
    if str.eq(op, "jump") {
        return opcode.do_jump
    }
    if str.eq(op, "func") {
        return opcode.do_func
    }
    if str.eq(op, "add") {
        return opcode.do_add
    }
    if str.eq(op, "sub") {
        return opcode.do_sub
    }
    if str.eq(op, "mul") {
        return opcode.do_mul
    }
    if str.eq(op, "div") {
        return opcode.do_div
    }
    if str.eq(op, "mod") {
        return opcode.do_mod
    }
    if str.eq(op, "pow") {
        return opcode.do_pow
    }
    if str.eq(op, "call") {
        return opcode.do_static_call
    }
    if str.eq(op, "ret") {
        return opcode.do_return
    }
    if str.eq(op, "putchar") {
        return opcode.do_putchar
    }
    if str.eq(op, "str") {
        return opcode.do_string_new
    }
    if str.eq(op, "length") {
        return opcode.do_length
    }
    if str.eq(op, "get") {
        return opcode.do_index_get
    }
    if str.eq(op, "set") {
        return opcode.do_index_set
    }
    if str.eq(op, "exec") {
        return opcode.do_exec
    }
    if str.eq(op, "save") {
        return opcode.do_save
    }
    if str.eq(op, "dump") {
        return opcode.do_dump
    }
    if str.eq(op, "read") {
        return opcode.do_read
    }
    if str.eq(op, "write") {
        return opcode.do_write
    }
    if str.eq(op, "arr") {
        return opcode.do_static_array_new
    }
    if str.eq(op, "cat") {
        return opcode.do_static_concat
    }
    if str.eq(op, "call0") {
        return opcode.do_static_call0
    }
    if str.eq(op, "call1") {
        return opcode.do_static_call1
    }
    if str.eq(op, "call2") {
        return opcode.do_static_call2
    }
    if str.eq(op, "call3") {
        return opcode.do_static_call3
    }
    if str.eq(op, "beq") {
        return opcode.do_branch_equal
    }
    if str.eq(op, "bneq") {
        return opcode.do_branch_not_equal
    }
    if str.eq(op, "blt") {
        return opcode.do_branch_less
    }
    if str.eq(op, "bgt") {
        return opcode.do_branch_greater
    }
    if str.eq(op, "blte") {
        return opcode.do_branch_less_than_equal
    }
    if str.eq(op, "bgte") {
        return opcode.do_branch_greater_than_equal
    }
    if str.eq(op, "bb") {
        return opcode.do_branch_bool
    }
    if str.eq(op, "inc") {
        return opcode.do_add_int
    }
    if str.eq(op, "dec") {
        return opcode.do_sub_int
    }
    if str.eq(op, "beqi") {
        return opcode.do_branch_equal_int
    }
    if str.eq(op, "bneqi") {
        return opcode.do_branch_not_equal_int
    }
    if str.eq(op, "blti") {
        return opcode.do_branch_less_int
    }
    if str.eq(op, "bgti") {
        return opcode.do_branch_greater_int
    }
    if str.eq(op, "bltei") {
        return opcode.do_branch_less_than_equal_int
    }
    if str.eq(op, "bgtei") {
        return opcode.do_branch_greater_than_equal_int 
    }
    if str.eq(op, "addi") {
        return opcode.do_add_int
    }
    if str.eq(op, "subi") {
        return opcode.do_sub_int
    }
    if str.eq(op, "muli") {
        return opcode.do_add_int
    }
    if str.eq(op, "divi") {
        return opcode.do_sub_int
    }
    if str.eq(op, "modi") {
        return opcode.do_add_int
    }
    if str.eq(op, "powi") {
        return opcode.do_sub_int
    }
    if str.eq(op, "exit") {
        return opcode.do_exit
    } 
    if str.eq(op, "store_reg") {
        return opcode.do_store_reg
    } 
    if str.eq(op, "store_none") {
        return opcode.do_store_none
    } 
    if str.eq(op, "store_bool") {
        return opcode.do_store_bool
    } 
    if str.eq(op, "store_int") {
        return opcode.do_store_int
    } 
    if str.eq(op, "load_global") {
        return opcode.do_load_global
    } 
    if str.eq(op, "swap_reg") {
        return opcode.do_swap_reg
    } 
    if str.eq(op, "index_get_int") {
        return opcode.do_index_get_int
    } 
    if str.eq(op, "index_set_int") {
        return opcode.do_index_set_int
    } 
    if str.eq(op, "jump") {
        return opcode.do_jump
    } 
    if str.eq(op, "func") {
        return opcode.do_func
    } 
    if str.eq(op, "add") {
        return opcode.do_add
    } 
    if str.eq(op, "sub") {
        return opcode.do_sub
    } 
    if str.eq(op, "mul") {
        return opcode.do_mul
    } 
    if str.eq(op, "div") {
        return opcode.do_div
    } 
    if str.eq(op, "mod") {
        return opcode.do_mod
    } 
    if str.eq(op, "pow") {
        return opcode.do_pow
    } 
    if str.eq(op, "static_call") {
        return opcode.do_static_call
    } 
    if str.eq(op, "return") {
        return opcode.do_return
    } 
    if str.eq(op, "putchar") {
        return opcode.do_putchar
    } 
    if str.eq(op, "string_new") {
        return opcode.do_string_new
    } 
    if str.eq(op, "length") {
        return opcode.do_length
    } 
    if str.eq(op, "index_get") {
        return opcode.do_index_get
    } 
    if str.eq(op, "index_set") {
        return opcode.do_index_set
    } 
    if str.eq(op, "exec") {
        return opcode.do_exec
    } 
    if str.eq(op, "save") {
        return opcode.do_save
    } 
    if str.eq(op, "dump") {
        return opcode.do_dump
    } 
    if str.eq(op, "read") {
        return opcode.do_read
    } 
    if str.eq(op, "write") {
        return opcode.do_write
    } 
    if str.eq(op, "static_array_new") {
        return opcode.do_static_array_new
    } 
    if str.eq(op, "static_concat") {
        return opcode.do_static_concat
    } 
    if str.eq(op, "static_call0") {
        return opcode.do_static_call0
    } 
    if str.eq(op, "static_call1") {
        return opcode.do_static_call1
    } 
    if str.eq(op, "static_call2") {
        return opcode.do_static_call2
    } 
    if str.eq(op, "static_call3") {
        return opcode.do_static_call3
    } 
    if str.eq(op, "branch_equal") {
        return opcode.do_branch_equal
    } 
    if str.eq(op, "branch_not_equal") {
        return opcode.do_branch_not_equal
    } 
    if str.eq(op, "branch_less") {
        return opcode.do_branch_less
    } 
    if str.eq(op, "branch_greater") {
        return opcode.do_branch_greater
    } 
    if str.eq(op, "branch_less_than_equal") {
        return opcode.do_branch_less_than_equal
    } 
    if str.eq(op, "branch_greater_than_equal") {
        return opcode.do_branch_greater_than_equal
    } 
    if str.eq(op, "branch_bool") {
        return opcode.do_branch_bool
    } 
    if str.eq(op, "add_int") {
        return opcode.do_add_int
    } 
    if str.eq(op, "sub_int") {
        return opcode.do_sub_int
    } 
    if str.eq(op, "branch_equal_int") {
        return opcode.do_branch_equal_int
    } 
    if str.eq(op, "branch_not_equal_int") {
        return opcode.do_branch_not_equal_int
    } 
    if str.eq(op, "branch_less_int") {
        return opcode.do_branch_less_int
    } 
    if str.eq(op, "branch_greater_int") {
        return opcode.do_branch_greater_int
    } 
    if str.eq(op, "branch_less_than_equal_int") {
        return opcode.do_branch_less_than_equal_int
    } 
    if str.eq(op, "branch_greater_than_equal_int") {
        return opcode.do_branch_greater_than_equal_int
    } 
    if str.eq(op, "mul_int") {
        return opcode.do_mul_int
    } 
    if str.eq(op, "div_int") {
        return opcode.do_div_int
    } 
    if str.eq(op, "mod_int") {
        return opcode.do_mod_int
    } 
    if str.eq(op, "pow_int") {
        return opcode.do_pow_int
    } 
    return opcode.no_opocode
}

def vm_opcode_args(op) {
    if op == opcode.do_exit {
        return []
    }
    if op == opcode.do_store_reg {
        return [opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_store_none {
        return [opcode.arg.reg]
    }
    if op == opcode.do_store_bool {
        return [opcode.arg.reg, opcode.arg.num]
    }
    if op == opcode.do_store_int {
        return [opcode.arg.reg, opcode.arg.num]
    }
    if op == opcode.do_swap_reg {
        return [opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_load_global {
        return [opcode.arg.reg, opcode.arg.num]
    }
    if op == opcode.do_index_get_int {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.num]
    }
    if op == opcode.do_index_set_int {
        return [opcode.arg.reg, opcode.arg.num, opcode.arg.reg]
    }
    if op == opcode.do_jump {
        return [opcode.arg.label]
    }
    if op == opcode.do_func {
        return [opcode.arg.label, opcode.arg.num]
    }
    if op == opcode.do_add {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_sub {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_mul {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_div {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_mod {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_pow {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_static_call {
        return [opcode.arg.reg, opcode.arg.label, opcode.arg.regs]
    }
    if op == opcode.do_return {
        return [opcode.arg.reg]
    }
    if op == opcode.do_putchar {
        return [opcode.arg.reg]
    }
    if op == opcode.do_string_new {
        return [opcode.arg.reg, opcode.arg.nums]
    }
    if op == opcode.do_length {
        return [opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_index_get {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_index_set {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_exec {
        return [opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_save {
        return [opcode.arg.reg]
    }
    if op == opcode.do_dump {
        return [opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_read {
        return [opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_write {
        return [opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_static_array_new {
        return [opcode.arg.reg, opcode.arg.regs]
    }
    if op == opcode.do_static_concat {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_static_call0 {
        return [opcode.arg.reg, opcode.arg.label]
    }
    if op == opcode.do_static_call1 {
        return [opcode.arg.reg, opcode.arg.label, opcode.arg.reg]
    }
    if op == opcode.do_static_call2 {
        return [opcode.arg.reg, opcode.arg.label, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_static_call3 {
        return [opcode.arg.reg, opcode.arg.label, opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_branch_equal {
        return [opcode.arg.reg, opcode.arg.label, opcode.arg.reg, opcode.arg.reg, opcode.arg.reg, opcode.arg.reg]
    }
    if op == opcode.do_branch_not_equal {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_less {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_greater {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_less_than_equal {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_greater_than_equal {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_bool {
        return [opcode.arg.reg, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_sub_int {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.num]
    }
    if op == opcode.do_add_int {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.num]
    }
    if op == opcode.do_branch_equal_int {
        return [opcode.arg.reg, opcode.arg.num, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_not_equal_int {
        return [opcode.arg.reg, opcode.arg.num, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_less_int {
        return [opcode.arg.reg, opcode.arg.num, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_greater_int {
        return [opcode.arg.reg, opcode.arg.num, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_less_than_equal_int {
        return [opcode.arg.reg, opcode.arg.num, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_branch_greater_than_equal_int {
        return [opcode.arg.reg, opcode.arg.num, opcode.arg.label, opcode.arg.label]
    }
    if op == opcode.do_mul_int {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.num]
    }
    if op == opcode.do_div_int {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.num]
    }
    if op == opcode.do_mod_int {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.num]
    }
    if op == opcode.do_pow_int {
        return [opcode.arg.reg, opcode.arg.reg, opcode.arg.num]
    }
    return []
}