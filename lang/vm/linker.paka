
import("../findvar.paka")

macro link {
    data = 0
    jump = 1
    label = 2
    call = 3
    func = 4
}

def vm_link(bc) {
    nops = 0
    func_locs = []
    sized0 = []
    sized1 = []
    labels = []
    i = 0
    while i < length(bc) {
        cur = bc[i]
        if cur[0] == link.func {
            func_locs = func_locs ~ [cur[1], nops]
        }
        if cur[0] == link.label {
            labels = labels ~ [cur[1], nops]
        }
        if cur[0] == link.call {
            sized0 = sized0 ~ [cur]
            nops = nops + 1
        }
        if cur[0] == link.jump {
            sized0 = sized0 ~ [cur]
            nops = nops + 1
        }
        if cur[0] == link.data {
            sized0 = sized0 ~ [cur]
            nops = nops + length(cur[1])
        }
        if length(sized0) >= 50 {
            sized1 = sized1 ~ sized0
            sized0 = []
        }
        i = i + 1
    }
    sized = sized1 ~ sized0
    ops0 = []
    ops1 = []
    ops2 = []
    ops3 = []
    ops4 = []
    i = 0
    while i < length(sized) {
        op = sized[i]
        if op[0] == link.data {
            ops0 = ops0 ~ op[1]
            if length(ops0) >= 30 {
                ops1 = ops1 ~ ops0
                ops0 = []
                if length(ops1) > 90 {
                    ops2 = ops2 ~ ops1
                    ops1 = []
                    if length(ops2) > 300 {
                        ops3 = ops3 ~ ops2
                        ops2 = []
                    }
                }
            }
        }
        if op[0] == link.jump {
            found = findvar.ikey(labels, op[1])
            if length(found) == 0 {
                puts("cannot jump to undefined label")
                exit
            }
            ops0 = ops0 ~ found
        }
        if op[0] == link.call {
            func = findvar(func_locs, op[1])
            if length(func) == 0 {
                put("link error: undefined: ")
                puts(op[1])
                exit
            }
            ops0 = ops0 ~ [func[0]]
        }
        i = i + 1
    }
    return ops3 ~ (ops2 ~ (ops1 ~ ops0))
}
