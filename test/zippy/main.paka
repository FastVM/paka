
import("../io.paka")
import("treegen.paka")
import("tablegen.paka")

asrcs = [
    "src/emit.paka", "src/findvar.paka", "src/macros.paka", "src/main.paka", "src/stream.paka", "src/strs.paka",
    "src/ctfe/eval.paka", "src/ctfe/run.paka", "src/ctfe/unfold.paka",
    "src/paka/lex.paka", "src/paka/read.paka", "src/paka/token.paka"
]

src = []

i = 0
while i < length(asrcs) {
    src ~= read(asrcs[i])
    i = i + 1
}

xsrc = []

i = 0
while i < length(src) {
    cur = src[i]
    if cur < 0 {
        xsrc ~= [cur + 256]
    } else {
        if cur >= 128 {
            put("err: ")
            putn(cur)
            puts("")
            exit
        }
        xsrc ~= [cur]
    }
    i = i + 1
}

tree = huffman_gen_tree(xsrc)

encoded = huffman_gen_table(tree)

def binarr_to_num(a) {
    ret = 0
    i = 0
    while i < length(a) {
        ret = ret + ret + a[i]
        i = i + 1
    }
    return ret
}

def binarr_to_str(a) {
    ret = []
    i = 0
    while i < length(a) {
        if a[i] == 0 {
            ret ~= "0"
        } else {
            ret ~= "1"
        }
        i = i + 1
    }
    return ret
}

i = 0
while i < length(encoded) {
    put(binarr_to_str(encoded[i][1]))
    put(": (")
    if encoded[i][0] == "\n"[0] {
        put("\\n")
    } else {
        putchar(encoded[i][0])
    }
    put(")")
    puts("")
    i = i + 1
}
