#?lang = "paka";

conf = {};
conf["dlang"] = "ldc2";
conf["dflags"] = "-Isource -c";
conf["link"] = ["gmp", "mpfr"];

arr.map = lambda (a, f) {
    len = arr.len(a);
    pos = 0;
    res = [];
    while (pos < len) {
        item = f(a[pos]);
        arr.push(res, item);
        pos += 1;
    };
    return res;
};

arr.filter = lambda (a, f) {
    len = arr.len(a);
    pos = 0;
    res = [];
    while (pos < len) {
        item = f(a[pos]);
        if (item) {
            arr.push(res, a[pos]);
        };
        pos += 1;
    };
    return res;
};

def run(cmd) {
    # io.print(cmd);
    return str.strip(proc.shell(cmd));
};

def emit(cmd) {
    io.print(cmd);
};

def listdir(dir, ext) {
    res = run("find " + dir);
    dirs = str.split(res, "\n");
    listing = arr.filter(dirs, lambda (file) {
        sliced = str.slice(file, str.len(file) - str.len(ext));
        return sliced == ext;
    });
    return listing;
};


def source_to_out(path) {
    dirs = str.split(path, "/");
    file = dirs[arr.len(dirs) - 1];
    outfile = str.split(file, ".")[0] + ".o";
    mid = arr.slice(dirs, 1, arr.len(dirs) - 1);
    resarray = ["out", *mid, outfile];
    res = str.join("/", resarray);
    return res;
};

def upto_last(path) {
    dirs = str.split(path, "/");
    mid = arr.slice(dirs, 0, arr.len(dirs) - 1);
    res = str.join("/", mid);
    return res;
};

def pathof(name) {
    io.print(name);
    return run("readlink -f " + name);
};

def dirand(name) {
    res = run("pwd") + "/" + name;
    io.print(pathof(res));
    return res;
};

def compile1(path) {
    out = source_to_out(path);
    dc = run("which " + conf.dlang);
    cmd = dc + " " + conf.dflags + " " + dirand(path) + " -od=" + dirand(upto_last(out));
    # run("mkdir -f " + dirand(upto_last(out)));
    io.print(run(cmd));
};

dirs = listdir("source", ".d");
# run("rm -rf output");
arr.map(dirs, compile1);