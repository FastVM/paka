Type = table{
    @of = lambda (arg) {
        type = sys.typeof(arg);
        return if (type == "table") {
            arg.type();
        } else {
            type; 
        };
    };
};
Type.type = Type;
tab.meta.set(Type, table {
    @str = lambda (this) {
        return "Type";
    };
});

Type.Number = table {
    @add = lambda(x, y) {
        return x.val + y.val;
    };
    @sub = lambda(x, y) {
        return x.val - y.val;
    };
    @mul = lambda(x, y) {
        return x.val * y.val;
    };
    @div = lambda(x, y) {
        return x.val / y.val;
    };
    @mod = lambda(x, y) {
        return x.val % y.val;
    };
    @str = lambda(this) {
        return this.val;
    };
    @get = table {
        @type = lambda () {
            return Type.Number;
        };
        @to = lambda(type) {
            return Type.Number(0);
        };
    };
    @type = Type;
};

tab.meta.set(Type.Number, table {
    @str = lambda(this) {
        return "Number";
    };
    @call = lambda(this, n) {
        type = Type.of(n);
        if (type == Type.Number) {
            return n;
        };
        if (type == Type.String) {
            return Type.String.to(Type.Number)(n);
        };
        if (type == "number") {
            t = table {
                @val = n;
            };
            return tab.meta.set(t, Type.Number);
        };
    };
});

Type.String = table {
    @add = lambda(x, y) {
        return x.val + y.val;
    };
    @sub = lambda(x, y) {
        return x.val * y.val;
    };
    @str = lambda(this) {
        return this.val;
    };
};

tab.meta.set(Type.String, table {
    @str = lambda(this) {
        return "String";
    };
    @call = lambda(this, s) {
        type = Type.of(s);
        if (type == Type.String) {
            return s;
        };
        if (type == Type.Number) {
            return Type.Number.to(Type.String)(s);
        };
        if (type == "string") {
            t = table {
                @val = s;
            };
            return tab.meta.set(t, Type.String);
        };
    };
});

x = Type.Number(10);
y = Type.Number(20);
io.print(x + y);
io.print(Type.of(x)(30));