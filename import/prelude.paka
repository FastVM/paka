
type = map{}

type.none = 0
type.boolean = 1
type.number = 2
type.function = 3
type.array = 4
type.string = 5
type.box = 6
type.map = 7

## lib stuff

iota_num = 0
def iota(name) {
    iota_num = iota_num + 1
    return box iota_num
}

## io lib

def puts(str) {
    i = 0
    while i < #str {
        putchar(str[i])
        i = i + 1
    }
}

def putn_gte0(n) {
    if n >= 10 {
        lowest = n % 10
        putn_gte0((n - lowest) / 10)
        putchar(lowest + 48)
    } else {
        putchar(n % 10 + 48)
    }
}

def putn(n) {
    if n < 0 {
        puts("-")
        putn_gte0(0 - n)
    } else {
        putn_gte0(n)
    }
}

def print_array(arr) {
    puts("[")
    i = 0
    while i < length(arr) {
        if i != 0 {
            puts(", ")
        }
        print(arr[i])
        i = i + 1
    }
    puts("]")
}

def print(value) {
    if type(value) == type.none {
        puts("none")
    } else: if type(value) == type.boolean {
        if value {
            puts("true")
        } else {
            puts("false")
        }
    } else: if type(value) == type.number {
        putn(value)
    } else: if type(value) == type.function {
        puts("lambda(...){}")
    } else: if type(value) == type.array {
        print_array(value)
    } else: if type(value) == type.string {
        puts("\"")
        puts(value)
        puts("\"")
    } else: if type(value) == type.box {
        puts("box ")
        print(unbox value)
    } else: if type(value) == type.map {
        puts("(")
        putn(length(value))
        puts("){")
        puts("...")
        puts("}")
    } else {
        puts("?")
    }
}

def println(value) {
    print(value)
    putchar(10)
}

## effects

effect = map{}

effect.default = 0
effect.type = 1
effect.bounds = 2
effect.div0 = 3
effect.mod0 = 4

handle effect.default {
    println("unhandled: effect not handled anywhere")
    exit
}
