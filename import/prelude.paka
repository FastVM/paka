
macro type.none {0}
macro type.boolean {1}
macro type.number {2}
macro type.function {3}
macro type.array {4}
macro type.string {5}
macro type.box {6}
macro type.map {7}

macro effect.math.div {1}
macro effect.math.mod {2}
macro effect.type.concat {3}
macro effect.bounds {4}

def puts(str) {
	i := 0
	while i < #str {
		putchar(str[i])
		i = i + 1
	}
}

def putn_gte0(n) {
	if n >= 10 {
		lowest := n % 10
		putn_gte0((n - lowest) / 10)
		putchar(lowest + 48)
	} else {
		putchar(n % 10 + 48)
	}
}

def putn(n) {
	if n < 0 {
		puts("-")
		putn_gte0(0 - n)
	} else {
		putn_gte0(n)
	}
}

def print_array(arr) {
	puts("[")
	i := 0
	while i < length(arr) {
		if i != 0 {
			puts(", ")
		}
		print(arr[i])
		i = i + 1
	}
	puts("]")
}

def print(value) {
	if type(value) == type.none {
		puts("none")
	} else: if type(value) == type.boolean {
		if value {
			puts("true")
		} else {
			puts("false")
		}
	} else: if type(value) == type.number {
		putn(value)
	} else: if type(value) == type.function {
		puts("lambda(...){}")
	} else: if type(value) == type.array {
		print_array(value)
	} else: if type(value) == type.string {
		puts("\"")
		puts(value)
		puts("\"")
	} else: if type(value) == type.box {
		puts("box ")
		print(unbox value)
	} else: if type(value) == type.map {
		puts("(")
		putn(length(value))
		puts("){")
		puts("...")
		puts("}")
	} else {
		puts("?")
	}
}

def println(value) {
	print(value)
	putchar(10)
}

iota_num := 0
def iota(name) {
	iota_num = iota_num + 1
	return box iota_num
}

handle effect.math.div {
	println("unhandled: div by zero")
	exit
}

handle effect.math.mod {
	println("unhandled: mod by zero")
	exit
}

handle effect.type.concat {
	println("unhandled: type error")
	exit
}

handle effect.bounds {
	println("unhandled: index out of bounds")
	exit
}
