
def to_int(str) {
    let ret 0
    let index 0
    while lt index length str {
        let ret add sub get str index '0' mul 10 ret
        let index add index 1
    }
    return ret
}

def printn0(n) {
    if lt n 10 {
        putchar add n '0'
    } else {
        printn div n 10
        putchar add mod n 10 '0'
    }
}

def printn(n) {
    if lt n 0 {
        putchar '-'
        printn0 sub 0 n
    } else {
        printn0 n
    }
}

def puts(s) {
    let i 0
    while lt i length s {
        putchar get s i
        let i add i 1
    }
}

def bottom_up_tree(item depth) {
    if neq depth 0 {
        let i add item item
        let left bottom_up_tree sub i 1 sub depth 1
        let right bottom_up_tree i sub depth 1
        return [item left right]
    } else {
        return [item]
    }
}

def item_check(tree) {
    if neq length tree 1 {
        return add get tree 0 sub item_check get tree 1 item_check get tree 2
    } else {
        return get tree 0
    }
}

def pow2(n) {
    if eq n 0 {
        return 1
    } else {
        return mul 2 pow2 sub n 1
    }
}

def main(args) {
    if eq length args 0 {
        puts("error: need an integer argument")
        exit
    }
    
    let N to_int get args 0
    let mindepth 4
    let maxdepth add mindepth 2
    if lt maxdepth N {
        let maxdepth N
    }
    
    let stretchdepth add maxdepth 1
    let tree bottom_up_tree 0 stretchdepth
    printn item_check tree
    putchar '\n'
    
    let longlivedtree bottom_up_tree 0 maxdepth
    
    let depth mindepth
    while lt depth add maxdepth 1 {
        let iters pow2 add sub maxdepth depth mindepth
        let check 0
        let checks 0
        while lt check iters {
            let tree bottom_up_tree 1 depth
            let checks add checks item_check tree
            let tree bottom_up_tree sub 0 1 depth
            let checks add checks item_check tree
            let check add check 1
        }
        printn checks
        putchar '\n'
        let depth add depth 2
    }
    printn item_check longlivedtree
    putchar '\n'
}

main args
return 0
