def bottom_up_tree(item, depth) {
    if depth != 0 {
        i = item + item
        left = rec(i-1, depth - 1)
        right = rec(i, depth - 1)
        return [item, left, right]
    } else {
        return [item]
    }
}

def item_check(tree) {
    if length(tree) != 1 {
        return tree[0] + rec(tree[1]) - rec(tree[2])
    } else {
        return tree[0]
    }
}

def pow2(n) {
    if n == 0 {
        return 1
    }
    return rec(n-1) * 2
}

N = 16
mindepth = 4
maxdepth = mindepth + 2
if maxdepth < N {
    maxdepth = N
}

stretchdepth = maxdepth + 1
stretchtree = bottom_up_tree(0, stretchdepth)
println(item_check(stretchtree))

longlivedtree = bottom_up_tree(0, maxdepth)

depth = mindepth
while depth < maxdepth + 1 {
    iters = pow2(maxdepth - depth + mindepth)
    check = 0
    checks = 0
    while check < iters {
        cur = item_check(bottom_up_tree(1, depth)) + item_check(bottom_up_tree(0-1, depth))
        checks = checks + cur
        check = check + 1
    }
    println(checks)
    depth = depth + 2
}
println(item_check(longlivedtree))