def bottom_up_tree(item, depth) {
    if depth != 0 {
        i := item + item
        left := rec(i-1, depth - 1)
        right := rec(i, depth - 1)
        return [item, left, right]
    } else {
        return [item]
    }
}

def item_check(tree) {
    if length(tree) != 1 {
        return tree[0] + rec(tree[1]) - rec(tree[2])
    } else {
        return tree[0]
    }
}

def pow2(n) {
    if n == 0 {
        return 1
    } else {
        return rec(n-1) * 2
    }
}

N := 6
mindepth := 4
maxdepth := mindepth + 2
if maxdepth < N {
    maxdepth = N
}
longlivedtree := bottom_up_tree(0, maxdepth)

depth := mindepth
while depth < maxdepth + 1 {
    iters := pow2(maxdepth - depth + mindepth)
    check := 0
    checks := 0
    while check < iters {
        tree := bottom_up_tree(1, depth)
        checks = checks + item_check(tree) 
        tree = bottom_up_tree(0-1, depth)
        checks = checks + item_check(tree)
        check = check + 1
        item_check(longlivedtree)
    }
    println(checks)
    depth = depth + 2
}
println(item_check(longlivedtree))