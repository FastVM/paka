def bottom_up_tree(item, depth) {
    if depth > 0 {
        i = item + item
        left = rec(i-1, depth - 1)
        right = rec(i, depth - 1)
        return [item, left, right]
    } else {
        return [item]
    }
}

def item_check(tree) {
    if #tree == 3 {
        return tree.0 + rec(tree.1) - rec(tree.2)
    } else {
        return tree.0
    }
}

N = 16
mindepth = 4
maxdepth = mindepth + 2
if maxdepth < N {
    maxdepth = N
}

stretchdepth = maxdepth + 1
stretchtree = bottom_up_tree(0, stretchdepth)
io.print("stretch tree of depth ", stretchdepth, " check: ", item_check(stretchtree))

longlivedtree = bottom_up_tree(0, maxdepth)

mindepth to (maxdepth + 1) foreach |> lambda(depth) {
    if (depth % 2 != 0) {
        return ""
    }
    iters = math.pow(2, maxdepth - depth + mindepth)
    check = 0
    checks = 0 to iters foreach |> lambda() {
        item_check(bottom_up_tree(1, depth)) + item_check(bottom_up_tree(0-1, depth))
    }
    check = + fold checks
    ## str.froms(iters * 2, " trees of depth ", depth, " check: ", check, "\n")
    io.print(iters * 2, " trees of depth ", depth, " check: ", check)
}

## io.put(~ fold ress)

io.print("long lived tree of depth: ", maxdepth, " check: ", item_check(longlivedtree))