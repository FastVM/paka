
## this code is slow :(

import("../lang/io.paka")
import("../lang/stream.paka")
import("../lang/vm/opcode.paka")
import("../lang/vm/linker.paka")
import("../lang/vm/format.paka")

def asm_spaces(stream) {
    while stream_peek(stream) == ' ' {
        stream_skip1(stream)
    }
}

def asm_newlines(stream) {
    while true {
        if stream_peek(stream) != '\n' {
            if stream_peek(stream) != ' ' {
                return none
            }
        }
        stream_skip1(stream)
    }
}

def asm_word(stream) {
    ret = []
    while true {
        chr = stream_peek(stream)
        if chr == ' ' {
            return ret
        }
        if chr == ':' {
            return ret
        }
        if chr == ',' {
            return ret
        }
        if chr == '\n' {
            return ret
        }
        ret = ret ~ [stream_read(stream)]
    }
}

def asm_num(stream) {
    ret = 0
    while true {
        chr = stream_peek(stream)
        if chr < '0' {
            return ret
        }
        if chr > '9' {
            return ret
        }
        stream_skip1(stream)
        ret = ret * 10 + chr - '0'
    }
}

def asm_single(stream, fmt) {
    if fmt == opcode.arg.reg {
        if stream_read(stream) != 'r' {
            puts("expected a register")
            exit
        }
        return [asm_num(stream)]
    }
    if fmt == opcode.arg.regs {
        if stream_read(stream) != '(' {
            puts("expected a register array")
        }
        nums = []
        while stream_read(stream) != ')' {
            asm_spaces(stream)
            if stream_peek(stream) == 0 {
                puts("expected closing paren: found eof")
                exit
            }
            if stream_peek(stream) == '\n' {
                puts("expected closing paren: before newline")
                exit
            }
            if stream_read(stream) != 'r' {
                puts("expected a register in an array")
                exit
            }
            nums = nums ~ asm_num(stream)
            asm_spaces(stream)
        }
        return [[length(nums)] ~ nums]
    }
    if fmt == opcode.arg.label {
        return [[link.jump, asm_word(stream)]]
    }
    if fmt == opcode.arg.num {
        return [asm_num(stream)]
    }
    if fmt == opcode.arg.nums {
        first = stream_read(stream)
        if first == '[' {
            nums = []
            while stream_read(stream) != ']' {
                asm_spaces(stream)
                if stream_peek(stream) == 0 {
                    puts("expected closing square: found eof")
                    exit
                }
                if stream_peek(stream) == '\n' {
                    puts("expected closing square: before newline")
                    exit
                }
                nums = nums ~ asm_num(stream)
                asm_spaces(stream)
            }
            return [length(nums)] ~ nums
        }
        if first == "\""[0] {
            nums = []
            while true {
                first = stream_read(stream)
                if first == "\""[0] {
                    return [length(nums)] ~ nums
                }
                nums = nums ~ [first]
            }
        }
        puts("expected open square or double quote")
        exit
    }
}

def asm_line(stream) {
    asm_newlines(stream)
    name = asm_word(stream)
    if stream_peek(stream) == ':' {
        stream_skip1(stream)
        return [[link.label, name]]
    }
    if name[0] == '.' {
        if name == ".byte" {
            asm_spaces(stream)
            val = asm_num(stream)
            return [val]
        } else {
            puts("unknown special opcode: " ~ name)
            exit
        }
    } else {
        val = vm_opcode_value(name)
        if val == none {
            puts("unknown opcode: " ~ name)
            exit
        }
        ret = [val]
        fmts = vm_opcode_args(val)
        foreach fmt: fmts {
            asm_spaces(stream)
            ret = ret ~ asm_single(stream, fmt)
        }
        return ret
    }
}

def asm_program(src) {
    stream = stream_new(src)
    instrs = []
    while stream_has_data(stream) {
        instrs = instrs ~ asm_line(stream)
        asm_spaces(stream)
        asm_newlines(stream)
    }
    return instrs
}

def remove(arr, n) {
    ret = []
    foreach skip(n) arg: arr {
        ret = ret ~ [arg]
    }
    return ret
}

def main(args) {
    if length(args) == 0 {
        puts("need a file as an argument")
        exit
    }
    out = "out.bc"
    file = args[0]
    args = remove(args, 1)
    if length(args) >= 1 {
        if args[0] == "-o" {
            args = remove(args, 1)
            out = args[0]
            args = remove(args, 1)
        } else {
            if args[0] == "--" {
                args = remove(args, 1)
                out = none
            } else {
                puts("unexpected flag: " ~ args[0])
                exit
            }
        }
    }
    src = read(file)
    if src == none {
        puts("cannot read file: " ~ file)
        exit
    }
    inter = asm_program(src)
    bc = vm_link(inter) ~ [0]
    if out == none {
        exec(bc, args)
    } else {
        if length(args) != 0 {
            puts("extra arguments when compiling to file " ~ out)
            exit
        }
        dump(out, bc)
        puts("out: " ~ out)
    }
}
