colors = {};

colors.rgb = {};
colors.rgb.is?(obj) = obj.scheme == "rgb";
colors.rgb.cons(r, g, b) = colors.rgb.from([r, g, b]);

colors.hsv = {};
colors.hsv.is?(obj) = obj.scheme == "hsv";
colors.hsv.cons(h, s, v) = colors.hsv.from([h, s, v]);

rgb_meta = {};
rgb_meta.get = {};
rgb_meta.arr(self) = [self.red, self.green, self.blue];
rgb_meta.str(self) = "colors.rgb.cons(" ~ str.from(self.red) ~ ", " ~ str.from(self.green) ~ ", " ~ str.from(self.blue) ~ ")";

hsv_meta = {};
hsv_meta.get = {};
hsv_meta.arr(self) = [self.hue, self.saturation, self.value];
hsv_meta.str(self) = "colors.hsv.cons(" ~ str.from(self.hue) ~ "deg, " ~ str.from(self.saturation) ~ "%, " ~ str.from(self.value) ~ "%)";

colors.conv = {};

def colors.conv.grey(color) {
    rgb = colors.rgb.from(color);
    return (rgb.red*3 + rgb.blue + rgb.green*4)*0.125;
};

colors.conv.red(color) = colors.rgb.from(color).red;
colors.conv.green(color) = colors.rgb.from(color).green;
colors.conv.blue(color) = colors.rgb.from(color).blue;

colors.conv.hue(color) = colors.hsv.from(color).hue;
colors.conv.saturation(color) = colors.hsv.from(color).saturation;
colors.conv.value(color) = colors.hsv.from(color).value;

def colors.rgb.from(argv) {
    if (sys.typeof(argv) == "array") {
        ret = {};
        ret.red = math.round.floor((argv[0] % 256 + 256) % 256);
        ret.green = math.round.floor((argv[1] % 256 + 256) % 256);
        ret.blue = math.round.floor((argv[2] % 256 + 256) % 256);
        ret.scheme = "rgb";
        tab.meta.set(ret, rgb_meta);
        return ret
    };
    if (colors.rgb.is?(argv)) {
        return argv;
    };
    if (colors.hsv.is?(argv)) {
        i = math.round.floor(argv.hue / 60);
        f = argv.hue / 60 - i;
        p = argv.value * (1 - argv.saturation);
        q = argv.value * (1 - f * argv.saturation);
        t = argv.value * (1 - (1 - f) * argv.saturation);
        if (i == 0) { return colors.rgb.cons(argv.value * 255, t * 255, p * 255); };
        if (i == 1) { return colors.rgb.cons(q * 255, argv.value * 255, p * 255); };
        if (i == 2) { return colors.rgb.cons(p * 255, argv.value * 255, t * 255); };
        if (i == 3) { return colors.rgb.cons(p * 255, q * 255, argv.value * 255); };
        if (i == 4) { return colors.rgb.cons(t * 255, p * 255, argv.value * 255); };
        if (i == 5) { return colors.rgb.cons(argv.value * 255, p * 255, q * 255); };
        return nil;
    };
};

def colors.hsv.from(argv) {
    if (sys.typeof(argv) == "array") {
        ret = {};
        ret.hue = (argv[0] % 360 + 360) % 360;
        ret.saturation = (argv[1] / 1.0001 % 1 + 1) % 1;
        ret.value = (argv[2] / 1.0001 % 1 + 1) % 1;
        ret.scheme = "hsv";
        tab.meta.set(ret, hsv_meta);
        return ret;
    };
    if (colors.hsv.is?(argv)) {
        return argv;
    };
    if (colors.rgb.is?(argv)) {
        r = argv.red / 256;
        g = argv.green / 256;
        b = argv.blue / 256;
        max = math.max(r, g, b);
        min = math.min(r, g, b);
        v = max;
        d = max - min;
        s = if (max == 0) { 0 } else {d / max};
        if (max == r) {
            h = (g - b) / d; 
            if (g < b) {
                h +=6; 
            };
        };
        if (max == g) {
            h = (b - r) / d + 2;
        };
        if (max == b) {
            h = (r - g) / d + 4;
        };
        if (max == min) {
            h = 0;
        } else {
            h /= 6;
        };
        return colors.hsv.cons(h * 360, s, v);
    };
};

return colors;