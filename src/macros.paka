
macro vm {
    ast.num
    ast.true
    ast.false
    ast.none
    ast.index
    ast.def
    ast.return
    ast.macro
    ast.when
    ast.exit
    ast.call
    ast.ident
    ast.exec
    ast.length
    ast.import
    ast.dump
    ast.readc
    ast.read
    ast.write
    ast.type
    ast.array
    ast.str
    ast.while
    ast.if
    ast.do
    ast.attrs
    ast.index
    ast.putchar
    ast.foreach
    ast.value_key
    ast.static_array
}

macro opcode {
    do_store_reg = 1
    do_store_none = 2
    do_store_bool = 3
    do_store_int = 4
    do_equal = 5
    do_not_equal = 6
    do_less = 7
    do_greater = 8
    do_less_than_equal = 9
    do_greater_than_equal = 10
    do_jump = 11
    do_func = 12
    do_add = 13
    do_sub = 14
    do_mul = 15
    do_div = 16
    do_mod = 17
    do_concat = 18
    do_static_call = 19
    do_return = 20
    do_putchar = 21
    do_string_new = 22
    do_array_new = 23
    do_length = 24
    do_index_get = 25
    do_index_set = 26
    do_type = 27
    do_exec = 28
    do_extend = 29
    do_push = 30
    do_dump = 31
    do_read = 32
    do_write = 33
    do_load_global = 34
    do_dynamic_call = 35
    do_static_array_new = 36
    do_static_concat = 37
    do_static_call0 = 38
    do_static_call1 = 39
    do_static_call2 = 41
    do_static_call3 = 42
    do_branch_equal = 43
    do_branch_not_equal = 44
    do_branch_less = 45
    do_branch_greater = 46
    do_branch_less_than_equal = 47
    do_branch_greater_than_equal = 48
    do_branch_bool = 49
    do_inc = 50
    do_dec = 51
    do_branch_equal_int = 52
    do_branch_not_equal_int = 53
    do_branch_less_int = 54
    do_branch_greater_int = 55
    do_branch_less_than_equal_int = 56
    do_branch_greater_than_equal_int = 57
}

macro token {
    open.paren
    open.square
    open.curly
    close.paren
    close.square
    close.curly
    colon
    comma
    keyword.while
    keyword.if
    keyword.else
    keyword.def
    keyword.return
    keyword.macro
    keyword.when
    keyword.exit
    keyword.true
    keyword.false
    keyword.none
    keyword.static
    keyword.foreach
    op
    str
    num
    ident
}

macro link {
    jump = 0-1
    label = 0-2
    call = 0-3
    func = 0-4
}