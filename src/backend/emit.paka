
import("../../lang/vm/linker.paka")

def reg(out) {
    out[1] = out[1] + 1
    return out[1]
}

def emit_num(form, out) {
    ret = reg(out)
    out[0] = out[0] ~ [opcode.do_store_int, ret, form[1]]
    return ret
}

def emit_true(form, out) {
    ret = reg(out)
    out[0] = out[0] ~ [opcode.do_store_bool, ret, 1]
    return ret
}

def emit_false(form, out) {
    ret = reg(out)
    out[0] = out[0] ~ [opcode.do_store_bool, ret, 0]
    return ret
}

def emit_none(form, out) {
    ret = reg(out)
    out[0] = out[0] ~ [opcode.do_store_none, ret]
    return ret
}

def emit_binop(op, form, out) {
    r1 = emit_to(form[1], out)
    r2 = emit_to(form[2], out)
    ret = reg(out)
    out[0] = out[0] ~ [op, ret, r1, r2]
    return ret
}

def emit_binop2(op_reg, op_num, form, out) {
    r1 = emit_to(form[1], out)
    if form[2][0] == vm.ast.num {
        ret = reg(out)
        out[0] = out[0] ~ [op_num, ret, r1, form[2][1]]
        return ret
    } else {
        r2 = emit_to(form[2], out)
        ret = reg(out)
        out[0] = out[0] ~ [op_reg, ret, r1, r2]
        return ret
    }
}

def emit_putchar(form, out) {
    r1 = emit_to(form[1], out)
    out[0] = out[0] ~ [opcode.do_putchar, r1]
    return none
}

def emit_exec(form, out) {
    r1 = emit_to(form[1], out)
    r2 = emit_to(form[2], out)
    out[0] = out[0] ~ [opcode.do_exec, r1, r2]
    return none
}

def emit_save(form, out) {
    r1 = emit_to(form[1], out)
    out[0] = out[0] ~ [opcode.do_save, r1]
    return none
}

def emit_length(form, out) {
    r1 = emit_to(form[1], out)
    ret = reg(out)
    out[0] = out[0] ~ [opcode.do_length, ret, r1]
    return ret
}

def emit_type(form, out) {
    r1 = emit_to(form[1], out)
    ret = reg(out)
    out[0] = out[0] ~ [opcode.do_type, ret, r1]
    return ret
}

def emit_do(form, out) {
    ret = none
    foreach skip(1) stmt: form {
        ret = emit_to(stmt, out)
    } 
    return ret
}

def emit_ident(form, out) {
    res = findvar(out[2], form[1])
    if res != none {
        return res
    }
    oreg = reg(out)
    out[0] = out[0] ~ [opcode.do_load_global, oreg, [link.get, form[1]]]
    return oreg
}

def emit_set(form, out) {
    if form[1][0] == vm.ast.ident {
        found = findvar(out[2], form[1][1])
        if found == none {
            n1 = out[1]
            from = emit_to(form[2], out)
            n2 = out[1]
            if n1 == n2 {
                to = reg(out)
                out[2] = out[2] ~ [form[1][1], to]
                out[0] = out[0] ~ [opcode.do_store_reg, to, from]
                if out[5] == true {
                    out[0] = out[0] ~ [[link.set, form[1][1], to]]
                }
                return to
            } else {
                out[2] = out[2] ~ [form[1][1], from]
                if out[5] == true {
                    out[0] = out[0] ~ [[link.set, form[1][1], from]]
                }
                return from
            }
        } else {
            from = emit_to(form[2], out)
            out[0] = out[0] ~ [opcode.do_store_reg, found, from]
            return found
        }
    }
    if form[1][0] == vm.ast.index {
        if form[1][2][0] == vm.ast.num {
            array = emit_to(form[1][1], out)
            from = emit_to(form[2], out)
            out[0] = out[0] ~ [opcode.do_index_set_int, array, form[1][2][1], from]
            return array
        } else {
            array = emit_to(form[1][1], out)
            index = emit_to(form[1][2], out)
            from = emit_to(form[2], out)
            out[0] = out[0] ~ [opcode.do_index_set, array, index, from]
            return array
        }
    }
    put("cannot set to: ")
    puts(form[1][0])
    exit
}

def jump(out) {
    count = out[3]
    out[3] = out[3] + 1
    return count
}

def goto(jump) {
    return [link.jump, jump] 
}

def label(jump) {
    return [link.label, jump]
}

def emit_def(form, out) {
    jover = jump(out)
    call = form[1]
    body = form[2]
    tmp1 = out[1]
    tmp2 = out[2]
    tmp5 = out[5]
    out[2] = []
    out[5] = false
    foreach skip(2) ent @i: call {
        out[2] = out[2] ~ [ent[1], i - 1]
    }
    out[1] = i - 1
    nregs = length(out[0]) + 2
    out[0] = out[0] ~ [opcode.do_func, goto(jover), 256]
    out[0] = out[0] ~ [[link.func, call[1][1]]]
    resreg = emit_to(body, out)
    if resreg == none {
        out[0] = out[0] ~ [opcode.do_store_none, 0, opcode.do_return, 0]
    } else {
        out[0] = out[0] ~ [opcode.do_return, resreg]
    }
    out[0][nregs] = out[1]
    out[1] = tmp1
    out[2] = tmp2
    out[5] = tmp5
    out[0] = out[0] ~ [label(jover)]
    return none
}

def emit_return(form, out) {
    rreg = emit_to(form[1], out)
    out[0] = out[0] ~ [opcode.do_return, rreg]
    return none
}

def emit_exit(form, out) {
    out[0] = out[0] ~ [opcode.do_exit]
    return none
}

def emit_call_static_opt(name, args, out) {
    ret = reg(out)
    if length(args) == 0 {
        out[0] = out[0] ~ [opcode.do_static_call0, ret, [link.call, name]]
        out[0] = out[0] ~ args
        return ret
    }
    if length(args) == 1 {
        out[0] = out[0] ~ [opcode.do_static_call1, ret, [link.call, name]]
        out[0] = out[0] ~ args
        return ret
    }
    if length(args) == 2 {
        out[0] = out[0] ~ [opcode.do_static_call2, ret, [link.call, name]]
        out[0] = out[0] ~ args
        return ret
    }
    if length(args) == 3 {
        out[0] = out[0] ~ [opcode.do_static_call3, ret, [link.call, name]]
        out[0] = out[0] ~ args
        return ret
    }
    out[0] = out[0] ~ [opcode.do_static_call, ret, [link.call, name], length(args)]
    out[0] = out[0] ~ args
    return ret
}

def emit_call(form, out) {
    if form[1][0] == vm.ast.ident {
        local = findvar(out[2], form[1][1])
        regs = []
        foreach skip(2) arg: form {
            regs = regs ~ [emit_to(arg, out)]
        } 
        if local == none {
            ret = emit_call_static_opt(form[1][1], regs, out)
        } else {
            puts("no dynamic calls yet")
            exit
        }
        return ret
    } else {
        puts("no dynamic calls yet")
        exit
    }
}

def emit_branch_alike(cond, jfalse, jtrue, out) {
    if cond[0] == "==" {
        lhs = emit_to(cond[1], out)
        if cond[2][0] == vm.ast.num {
            out[0] = out[0] ~ [opcode.do_branch_equal_int, lhs, cond[2][1], goto(jfalse), goto(jtrue)]
        } else {
            rhs = emit_to(cond[2], out)
            out[0] = out[0] ~ [opcode.do_branch_equal, lhs, rhs, goto(jfalse), goto(jtrue)]
        }
        return none
    }
    if cond[0] == "!=" {
        lhs = emit_to(cond[1], out)
        if cond[2][0] == vm.ast.num {
            out[0] = out[0] ~ [opcode.do_branch_not_equal_int, lhs, cond[2][1], goto(jfalse), goto(jtrue)]
        } else {
            rhs = emit_to(cond[2], out)
            out[0] = out[0] ~ [opcode.do_branch_not_equal, lhs, rhs, goto(jfalse), goto(jtrue)]
        }
        return none
    }
    if cond[0] == "<" {
        lhs = emit_to(cond[1], out)
        if cond[2][0] == vm.ast.num {
            out[0] = out[0] ~ [opcode.do_branch_less_int, lhs, cond[2][1], goto(jfalse), goto(jtrue)]
        } else {
            rhs = emit_to(cond[2], out)
            out[0] = out[0] ~ [opcode.do_branch_less, lhs, rhs, goto(jfalse), goto(jtrue)]
        }
        return none
    }
    if cond[0] == ">" {
        lhs = emit_to(cond[1], out)
        if cond[2][0] == vm.ast.num {
            out[0] = out[0] ~ [opcode.do_branch_greater_int, lhs, cond[2][1], goto(jfalse), goto(jtrue)]
        } else {
            rhs = emit_to(cond[2], out)
            out[0] = out[0] ~ [opcode.do_branch_greater, lhs, rhs, goto(jfalse), goto(jtrue)]
        }
        return none
    }
    if cond[0] == "<=" {
        lhs = emit_to(cond[1], out)
        rhs = emit_to(cond[2], out)
        out[0] = out[0] ~ [opcode.do_branch_less_than_equal, lhs, rhs, goto(jfalse), goto(jtrue)]
        return none
    }
    if cond[0] == ">=" {
        lhs = emit_to(cond[1], out)
        if cond[2][0] == vm.ast.num {
            out[0] = out[0] ~ [opcode.do_branch_greater_than_equal_int, lhs, cond[2][1], goto(jfalse), goto(jtrue)]
        } else {
            rhs = emit_to(cond[2], out)
            out[0] = out[0] ~ [opcode.do_branch_greater_than_equal, lhs, rhs, goto(jfalse), goto(jtrue)]
        }
        return none
    }
    reg = emit_to(cond, out)
    out[0] = out[0] ~ [opcode.do_branch_bool, reg, goto(jfalse), goto(jtrue)]
    return none
}

def emit_while(form, out) {
    jredo = jump(out)
    jtrue = jump(out)
    jfalse = jump(out)
    out[0] = out[0] ~ [label(jredo)]
    emit_branch_alike(form[1], jfalse, jtrue, out)
    out[0] = out[0] ~ [label(jtrue)]
    emit_to(form[2], out)
    out[0] = out[0] ~ [opcode.do_jump, goto(jredo)]
    out[0] = out[0] ~ [label(jfalse)]
    return none
}

def emit_if(form, out) {
    jout = jump(out)
    jtrue = jump(out)
    jfalse = jump(out)
    emit_branch_alike(form[1], jfalse, jtrue, out)
    out[0] = out[0] ~ [label(jtrue)]
    emit_to(form[2], out)
    out[0] = out[0] ~ [opcode.do_jump, goto(jout)]
    out[0] = out[0] ~ [label(jfalse)]
    emit_to(form[3], out)
    ## out[0] = out[0] ~ [opcode.do_jump, goto(jout)]
    out[0] = out[0] ~ [label(jout)]
    return none
}

def emit_array(form, out) {
    regs = []
    foreach skip(1) ent: form {
        regs = regs ~ [emit_to(ent, out)]
    }
    ret = reg(out)
    out[0] = out[0] ~ [opcode.do_static_array_new, ret, length(regs)]
    out[0] = out[0] ~ regs
    return ret
}

def emit_static_array(form, out) {
    regs = []
    foreach skip(1) ent: form {
        regs = regs ~ [emit_to(ent, out)]
    }
    ret = reg(out)
    out[0] = out[0] ~ [opcode.do_static_array_new, ret, length(regs)]
    out[0] = out[0] ~ regs
    return ret
}

def emit_str(form, out) {
    ret = reg(out)
    out[0] = out[0] ~ [opcode.do_string_new, ret, length(form[1])]
    out[0] = out[0] ~ form[1]
    return ret
}

def emit_dump(form, out) {
    r1 = emit_to(form[1], out)
    r2 = emit_to(form[2], out)
    out[0] = out[0] ~ [opcode.do_dump, r1, r2]
    return none
}

def emit_write(form, out) {
    r1 = emit_to(form[1], out)
    r2 = emit_to(form[2], out)
    out[0] = out[0] ~ [opcode.do_write, r1, r2]
    return none
}

def emit_read(form, out) {
    r1 = emit_to(form[1], out)
    ret = reg(out)
    out[0] = out[0] ~ [opcode.do_read, ret, r1]
    return ret
}

def emit_foreach_reverse(form, out) {
    valreg = emit_to(form[2], out)
    indreg = reg(out)
    out[0] = out[0] ~ [opcode.do_length, indreg, valreg]
    offset = findvar(form[4][1], "skip")
    if offset != none {
        sub = emit_to(offset, out)
        out[0] = out[0] ~ [opcode.do_sub, indreg, indreg, sub]
    }
    jtrue = jump(out)
    jfalse = jump(out)
    out[0] = out[0] ~ [opcode.do_branch_greater_int, indreg, 0, goto(jfalse), goto(jtrue)]
    out[0] = out[0] ~ [label(jtrue)]
    foreach ent: form[1] {
        if ent[0] == vm.ast.ident {
            varreg = reg(out)
            out[2] = out[2] ~ [ent[1], varreg]
            out[0] = out[0] ~ [opcode.do_sub_int, indreg, indreg, 1]
            out[0] = out[0] ~ [opcode.do_index_get, varreg, valreg, indreg]
        } else {
            varreg = reg(out)
            ivarreg = reg(out)
            out[2] = out[2] ~ [ent[1][1], varreg]
            out[2] = out[2] ~ [ent[2][1], ivarreg]
            out[0] = out[0] ~ [opcode.do_sub_int, indreg, indreg, 1]
            out[0] = out[0] ~ [opcode.do_index_get, varreg, valreg, indreg]
            out[0] = out[0] ~ [opcode.do_store_reg, ivarreg, indreg]
        }
    }
    tmpreg = emit_to(form[3], out)
    out[0] = out[0] ~ [opcode.do_branch_greater_int, indreg, 0, goto(jfalse), goto(jtrue)]
    out[0] = out[0] ~ [label(jfalse)]
    return none
}

def emit_foreach_forward(form, out) {
    valreg = emit_to(form[2], out)
    lenreg = reg(out)
    out[0] = out[0] ~ [opcode.do_length, lenreg, valreg]
    offset = findvar(form[4][1], "skip")
    indreg = reg(out)
    if offset != none {
        xreg = emit_to(offset, out)
        out[0] = out[0] ~ [opcode.do_store_reg, indreg, xreg]
    } else {
        out[0] = out[0] ~ [opcode.do_store_int, indreg, 0]
    }
    jtrue = jump(out)
    jfalse = jump(out)
    out[0] = out[0] ~ [opcode.do_branch_less, indreg, lenreg, goto(jfalse), goto(jtrue)]
    out[0] = out[0] ~ [label(jtrue)]
    foreach ent: form[1] {
        if ent[0] == vm.ast.ident {
            varreg = reg(out)
            out[2] = out[2] ~ [ent[1], varreg]
            out[0] = out[0] ~ [opcode.do_index_get, varreg, valreg, indreg]
            out[0] = out[0] ~ [opcode.do_add_int, indreg, indreg, 1]
        } else {
            varreg = reg(out)
            ivarreg = reg(out)
            out[2] = out[2] ~ [ent[1][1], varreg]
            out[2] = out[2] ~ [ent[2][1], ivarreg]
            out[0] = out[0] ~ [opcode.do_index_get, varreg, valreg, indreg]
            out[0] = out[0] ~ [opcode.do_store_reg, ivarreg, indreg]
            out[0] = out[0] ~ [opcode.do_add_int, indreg, indreg, 1]
        }
    }
    tmpreg = emit_to(form[3], out)
    out[0] = out[0] ~ [opcode.do_branch_less, indreg, lenreg, goto(jfalse), goto(jtrue)]
    out[0] = out[0] ~ [label(jfalse)]
    return none
}

def emit_foreach(form, out) {
    if findvar(form[4][1], "reverse") == true {
        emit_foreach_reverse(form, out)
    } else {
        emit_foreach_forward(form, out)
    }
}


def emit_to(form, out) {
    ty = form[0]
    if ty == vm.ast.num {
        return emit_num(form, out)
    }
    if ty == vm.ast.true {
        return emit_true(form, out)
    }
    if ty == vm.ast.false {
        return emit_false(form, out)
    }
    if ty == vm.ast.none {
        return emit_none(form, out)
    }
    if ty == vm.ast.index {
        return emit_binop2(opcode.do_index_get, opcode.do_index_get_int, form, out)
    }
    if ty == vm.ast.def {
        return emit_def(form, out)
    }
    if ty == vm.ast.return {
        return emit_return(form, out)
    }
    if ty == vm.ast.exit {
        return emit_exit(form, out)
    }
    if ty == vm.ast.call {
        return emit_call(form, out)
    }
    if ty == vm.ast.ident {
        return emit_ident(form, out)
    }
    if ty == vm.ast.putchar {
        return emit_putchar(form, out)
    }
    if ty == vm.ast.exec {
        return emit_exec(form, out)
    }
    if ty == vm.ast.save {
        return emit_save(form, out)
    }
    if ty == vm.ast.length {
        return emit_length(form, out)
    }
    if ty == vm.ast.dump {
        return emit_dump(form, out)
    }
    if ty == vm.ast.read {
        return emit_read(form, out)
    }
    if ty == vm.ast.write {
        return emit_write(form, out)
    }
    if ty == vm.ast.type {
        return emit_type(form, out)
    }
    if ty == vm.ast.static_array {
        return emit_static_array(form, out)
    }
    if ty == vm.ast.str {
        return emit_str(form, out)
    }
    if ty == vm.ast.while {
        return emit_while(form, out)
    }
    if ty == vm.ast.if {
        return emit_if(form, out)
    }
    if ty == vm.ast.do {
        return emit_do(form, out)
    }
    if ty == vm.ast.foreach {
        return emit_foreach(form, out)
    }
    if ty == "=" {
        return emit_set(form, out)
    }
    if ty == "~" {
        return emit_binop(opcode.do_static_concat, form, out)
    }
    if ty == "+" {
        return emit_binop2(opcode.do_add, opcode.do_add_int, form, out)
    }
    if ty == "-" {
        return emit_binop2(opcode.do_sub, opcode.do_sub_int, form, out)
    }
    if ty == "*" {
        return emit_binop2(opcode.do_mul, opcode.do_mul_int, form, out)
    }
    if ty == "/" {
        return emit_binop2(opcode.do_div, opcode.do_div_int, form, out)
    }
    if ty == "%" {
        return emit_binop2(opcode.do_mod, opcode.do_mod_int, form, out)
    }
    if ty == "**" {
        return emit_binop2(opcode.do_pow, opcode.do_pow_int, form, out)
    }
    put("emit: form: unknown form: ")
    println(form)
    exit
}

def emit(form, path) {
    out = [[], 0, ["args", 0], 0, [], true]
    form = ctfe_run(form, path)
    form = check_all(form)
    emit_to(form, out)
    out[0] = out[0] ~ [0]
    linked = vm_link(out[0])
    return linked
}