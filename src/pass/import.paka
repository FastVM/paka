
def pass_import_copy(form, state) {
    ret = [form[0]]
    foreach skip(1) ent: form {
        ret = ret ~ [pass_import_state(ent, state)]
    }
    return ret
}

def pass_import_resolve_import(form, state) {
    name = state[0] ~ ['/'] ~ form[1][1]
    foreach existing: state[1] {
        if existing == name {
            return [vm.ast.do]
        }
    }
    state[1] = state[1] ~ [name]
    src = read(name)
    if length(src) == 0 {
        puts("cannot open file: " ~ name)
        exit
    }
    ast = paka_parse(src)
    xstate = [file_dir(name), state[1]]
    full = pass_import_state(ast, xstate)
    state[1] = xstate[1]
    return full
}

def pass_import_state(form, state) {
    ty = form[0]
    if util_ast_is_literal(ty) {
        return form
    }
    if ty == vm.ast.op {
        return [ty, form[1], pass_import_state(form[2], state), pass_import_state(form[3], state)]
    }
    if ty == vm.ast.ident {
        return form
    }
    if ty == vm.ast.import {
        return pass_import_resolve_import(form, state)
    }
    return pass_import_copy(form, state)
}

def pass_import(form, path) {
    dir = file_dir(path)
    state = [dir, []]
    ret = pass_import_state(form, state)
    return ret
}
