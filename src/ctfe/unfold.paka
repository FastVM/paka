
def ctfe_unfold_const(form, state) {
    return form
}

def ctfe_unfold_copy(form, state) {
    ret = [form[0]]
    i = 1
    while i < length(form) {
        ret ~= [ctfe_unfold(form[i], state)]
        i = i + 1
    }
    return ret
}

def ctfe_unfold_import(form, state) {
    name = state[3][0] ~ ['/'] ~ form[1][1]
    i = 0
    while i < length(state[3][1]) {
        existing = state[3][1][i]
        if existing == name {
            return [vm.ast.none]
        }
        i = i + 1
    }
    state[3][1] ~= [name]
    src = read(name)
    ast = paka_parse(src)
    full = ctfe_unfold(ast, state)
    return full
}

def ctfe_unfold(form, state) {
    ty = form[0]
    if ty == vm.ast.num {
        return ctfe_unfold_const(form, state)
    }
    if ty == vm.ast.true {
        return ctfe_unfold_const(form, state)
    }
    if ty == vm.ast.false {
        return ctfe_unfold_const(form, state)
    }
    if ty == vm.ast.none {
        return ctfe_unfold_const(form, state)
    }
    if ty == vm.ast.str {
        return ctfe_unfold_const(form, state)
    }
    if ty == vm.ast.ident {
        return ctfe_unfold_const(form, state)
    }
    if ty == vm.ast.index {
        return ctfe_unfold_copy(form, state)
    }
    if ty == vm.ast.def {
        state[0] ~= [form[1][1][1], form]
        return ctfe_unfold_copy(form, state)
    }
    if ty == vm.ast.return {
        return ctfe_unfold_copy(form, state)
    }
    if ty == vm.ast.macro {
        return ctfe_unfold_const(form, state)
    }
    if ty == vm.ast.exit {
        return ctfe_unfold_copy(form, state)
    }
    if ty == vm.ast.call {
        return ctfe_unfold_copy(form, state)
    }
    if ty == vm.ast.putchar {
        return ctfe_unfold_copy(form, state)
    }
    if ty == vm.ast.exec {
        return ctfe_unfold_copy(form, state)
    }
    if ty == vm.ast.length {
        return ctfe_unfold_copy(form, state)
    }
    if ty == vm.ast.import {
        return ctfe_unfold_import(form, state)
    }
    if ty == vm.ast.dump {
        return ctfe_unfold_copy(form, state)
    }
    if ty == vm.ast.readc {
        return ctfe_unfold_copy(form, state)
    }
    if ty == vm.ast.read {
        return ctfe_unfold_copy(form, state)
    }
    if ty == vm.ast.write {
        return ctfe_unfold_copy(form, state)
    }
    if ty == vm.ast.type {
        return ctfe_unfold_copy(form, state)
    }
    if ty == vm.ast.array {
        return ctfe_unfold_copy(form, state)
    }
    if ty == vm.ast.while {
        return ctfe_unfold_copy(form, state)
    }
    if ty == vm.ast.if {
        return ctfe_unfold_copy(form, state)
    }
    if ty == vm.ast.do {
        return ctfe_unfold_copy(form, state)
    }
    if ty == vm.ast.static {
        return ctfe_unfold_copy(form, state)
    }
    if ty == "=" {
        return ctfe_unfold_copy(form, state)
    }
    if ty == "~=" {
        return ctfe_unfold_copy(form, state)
    }
    if ty == "~" {
        return ctfe_unfold_copy(form, state)
    }
    if ty == "+" {
        return ctfe_unfold_copy(form, state)
    }
    if ty == "-" {
        return ctfe_unfold_copy(form, state)
    }
    if ty == "*" {
        return ctfe_unfold_copy(form, state)
    }
    if ty == "/" {
        return ctfe_unfold_copy(form, state)
    }
    if ty == "%" {
        return ctfe_unfold_copy(form, state)
    }
    if ty == "<" {
        return ctfe_unfold_copy(form, state)
    }
    if ty == ">" {
        return ctfe_unfold_copy(form, state)
    }
    if ty == "<=" {
        return ctfe_unfold_copy(form, state)
    }
    if ty == ">=" {
        return ctfe_unfold_copy(form, state)
    }
    if ty == "==" {
        return ctfe_unfold_copy(form, state)
    }
    if ty == "!=" {
        return ctfe_unfold_copy(form, state)
    }
    put("unfold: unknown form: ")
    println(form)
    exit
}