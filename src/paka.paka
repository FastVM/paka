

import("../lang/io.paka")
import("../lang/file.paka")

import("macros.paka")
import("strs.paka")
import("stream.paka")
import("findvar.paka")
import("ctfe/eval.paka")
import("ctfe/run.paka")
import("ctfe/unfold.paka")
import("paka/token.paka")
import("paka/lex.paka")
import("paka/read.paka")
import("emit.paka")

def vm_prelude() {
    src = "

def put(str) {
    i = 0
    while i < length(str) {
        putchar(str[i])
        i = i + 1
    }
}

def puts(str) {
    put(str)
    putchar(10)
}

def putn_gte0(n) {
    if n >= 10 {
        lowest = n % 10
        putn_gte0((n - lowest) / 10)
        putchar(lowest + 48)
    } else {
        putchar(n % 10 + 48)
    }
}

def putn(n) {
    if n < 0 {
        put(\"-\")
        putn_gte0(0 - n)
    } else {
        putn_gte0(n)
    }
}

def print(n) {
    if type(n) == type(0) {
        putn(n)
        return none
    }
    if type(n) == type(\"\") {
        put(n)
        return none
    }
    if type(n) == type([]) {
        put(\"[\")
        i = 0
        while i < length(n) {
            if i != 0 {
                put(\", \")
            }
            print(n[i])
            i = i + 1
        }
        put(\"]\")
        return none
    }
    if n == true {
        put(\"true\")
        return none
    }
    if n == false {
        put(\"false\")
        return none
    }
    if n == none {
        put(\"none\")
        return none
    }
    put(\"?\")
    return none
}

def println(n) {
    print(n)
    putchar(10)
}

    "
    ast = paka_parse(src)
    return ast
}

def vm_set(s) {
    return [vm.ast.do, ["=", [vm.ast.ident, "_ret"], s]]
}

def vm_put() {
    return [vm.ast.if, ["!=", [vm.ast.ident, "_ret"], [vm.ast.none]], [vm.ast.call, [vm.ast.ident, "println"], [vm.ast.ident, "_ret"]], [vm.ast.do]]
}

def main(argv) {
    run = false
    outfile = "exec.bc"
    srcfile = none
    rest = []
    i = 0
    while i < length(argv) {
        arg = argv[i]
        if run {
            rest ~= [arg]
            i = i + 1
        } else {
            if arg[0] == '-' {
                if arg[1] == '-' {
                    run = true
                } 
                if arg[1] == 'o' {
                    i = i + 1
                    outfile = argv[i]
                }
                if arg[1] == 'e' {
                    i = i + 1
                    ast1 = paka_parse("none " ~ argv[i])
                    ast2 = [vm.ast.do, vm_prelude(), vm_set(ast1), vm_put()]
                    bc = emit(ast2, ['/'])
                    i = i + 1
                    while i < length(argv) {
                        rest ~= [argv[i]]
                        i = i + 1
                    }
                    exec(bc, rest)
                    return none
                }
            } else {
                if srcfile != none {
                    puts("only one source can be provided")
                    exit
                }
                srcfile = arg
            }
            i = i + 1
        }
    }
    if srcfile == none {
        puts("no sources provided")
        exit
    }
    src = read(srcfile)
    if src == none {
        puts("cannot read file")
        exit
    }
    ast = paka_parse(src)
    bc = emit(ast, srcfile)
    if run {
        exec(bc, rest)
    } else {
        dump(outfile, bc)
    }
}

main(args)
