
def paka_tokenize_stream1(bsrc, ops_flat) {
    first = stream_peek(bsrc)
    if first == ' ' {
        stream_skip1(bsrc)
        return paka_tokenize_stream1(bsrc, ops_flat)
    }
    if first == 10 {
        stream_skip1(bsrc)
        return paka_tokenize_stream1(bsrc, ops_flat)
    }
    if first == 13 {
        stream_skip1(bsrc)
        return paka_tokenize_stream1(bsrc, ops_flat)
    }
    if first == '#' {
        stream_skip1(bsrc)
        while 1 {
            cur = stream_read(bsrc)
            if cur == 10 {
                return paka_tokenize_stream1(bsrc, ops_flat)
            }
            if cur == 13 {
                return paka_tokenize_stream1(bsrc, ops_flat)
            }
        }
    }
    if first == '(' {
        stream_skip1(bsrc)
        return [token.open.paren]
    }
    if first == ')' {
        stream_skip1(bsrc)
        return [token.close.paren]
    }
    if first == '{' {
        stream_skip1(bsrc)
        return [token.open.curly]
    }
    if first == '}' {
        stream_skip1(bsrc)
        return [token.close.curly]
    }
    if first == '[' {
        stream_skip1(bsrc)
        return [token.open.square]
    }
    if first == ']' {
        stream_skip1(bsrc)
        return [token.close.square]
    }
    if first == ',' {
        stream_skip1(bsrc)
        return [token.comma]
    }
    if first == ''' {
        stream_skip1(bsrc)
        cur = stream_read(bsrc)
        if cur == "\\"[0] {
            cur = stream_read(bsrc)
            if stream_read(bsrc) != ''' {
                puts("unterminated char literal")
                exit
            }
            if cur == 'n' {
                return [token.num, 10]
            } 
            if cur == 'r' {
                return [token.num, 13]
            } 
            if cur == "\""[0] {
                return [token.num, cur]
            }
            if cur == "\\"[0] {
                return [token.num, cur]
            }
        } else {
            if stream_read(bsrc) != ''' {
                puts("unterminated char literal")
                exit
            }
            return [token.num, cur]
        }
    }
    if first == "\""[0] {
        stream_skip1(bsrc)
        ret = []
        while 1 {
            cur = stream_read(bsrc)
            if cur == 0 {
                puts("eof in str")
                exit
            }
            if cur == "\""[0] {
                return [token.str, ret]
            }
            if cur == "\\"[0] {
                cur = stream_read(bsrc)
                if cur == 'n' {
                    ret = ret ~ [10]
                } 
                if cur == "\""[0] {
                    ret = ret ~ "\""
                }
                if cur == "\\"[0] {
                    ret = ret ~ "\\"
                }
            } else {
                ret = ret ~ [cur]
            }
        }
        puts("bad char")
        exit
    }
    i = 0
    while i < length(ops_flat) {
        if stream_starts_swith(bsrc, ops_flat[i]) {
            stream_skip(bsrc, length(ops_flat[i]))
            return [token.op, ops_flat[i]]
        }
        i = i + 1
    }
    if char_isdigit(first) {
        n = 0
        while char_isdigit(stream_peek(bsrc)) {
            n = n * 10 + stream_read(bsrc) - '0'
        }
        return [token.num, n]
    }
    if char_id0(first) {
        xsrc = []
        while 1 {
            if char_id(stream_peek(bsrc)) {
                xsrc = xsrc ~ [stream_read(bsrc)]
            } else {
                n0 = xsrc[0]
                if n0 == 'w' {
                    if str.eq(xsrc, "while") {
                        return [token.keyword.while]
                    }
                    return [token.ident, xsrc]
                }
                if n0 == 'i' {
                    if str.eq(xsrc, "if") {
                        return [token.keyword.if]
                    }
                    return [token.ident, xsrc]
                }
                if n0 == 'e' {
                    if str.eq(xsrc, "else") {
                        return [token.keyword.else]
                    }
                    if str.eq(xsrc, "exit") {
                        return [token.keyword.exit]
                    }
                    return [token.ident, xsrc]
                }
                if n0 == 'd' {
                    if str.eq(xsrc, "def") {
                        return [token.keyword.def]
                    }
                    if str.eq(xsrc, "defer") {
                        return [token.keyword.defer]
                    }
                    return [token.ident, xsrc]
                }
                if n0 == 'r' {
                    if str.eq(xsrc, "return") {
                        return [token.keyword.return]
                    }
                    return [token.ident, xsrc]
                }
                if n0 == 'm' {
                    if str.eq(xsrc, "macro") {
                        return [token.keyword.macro]
                    }
                    return [token.ident, xsrc]
                }
                return [token.ident, xsrc]
            }
        }
    }
    if first == 0 {
        return []
    }
    puts("bad char: " ~ [first])
    exit
}
