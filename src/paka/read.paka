

def paka_read_call(tokens, args, state) {
    got = token_stream_read(tokens)
    if got[0] != token.open.paren {
        puts("error: wanted `(`")
        exit
    }
    while true {
        cur = token_stream_peek(tokens)
        if length(cur) == 0 {
            puts("error 1")
            exit
        }
        if cur[0] == token.close.paren {
            token_stream_skip1(tokens)
            return paka_read_post(tokens, args, state)
        }
        arg = paka_read_expr_base(tokens, state)
        args = args ~ [arg]
        if token_stream_peek(tokens)[0] == token.comma {
            token_stream_skip1(tokens)
        }
    }
}

def paka_read_post(tokens, last, state) {
    first = token_stream_peek(tokens)
    if length(first) == 0 {
        return last
    }
    if first[0] == token.open.square {
        token_stream_skip1(tokens)
        index = paka_read_expr_base(tokens, state)
        token_stream_skip1(tokens)
        return paka_read_post(tokens, [vm.ast.index, last, index], state)
    }
    if first[0] == token.open.paren {
        args = [vm.ast.call, last] 
        return paka_read_call(tokens, args, state)
    }
    return last
}

def paka_read_foreach_attrs(tokens, state) {
    first = token_stream_peek(tokens)
    if first[0] == token.ident {
        if str.eq(first[1], "reverse") {
            token_stream_skip1(tokens)
            return ["reverse", true] ~ paka_read_foreach_attrs(tokens, state)
        }
        if str.eq(first[1], "skip") {
            token_stream_skip1(tokens)
            ent = paka_read_single(tokens, state)
            return ["skip", ent] ~ paka_read_foreach_attrs(tokens, state)
        }
    }
    return []
}

def paka_read_foreach_var(tokens, state) {
    var = paka_read_single(tokens, state)
    first = token_stream_peek(tokens)
    if first[0] == token.comma {
        return var
    }
    if first[0] == token.op {
        if str.eq(first[1], ":") {
            return var
        }
    }
    if first[0] == token.op {
        if str.eq(first[1], "@") {
            token_stream_skip1(tokens)
            index = paka_read_single(tokens, state)
            return [vm.ast.value_key, var, index]
        }
    }
    puts("error: foreach vars: wanted `,` or `:` or `@` after variable")
    exit
}

def paka_read_single(tokens, state) {
    first = token_stream_peek(tokens)
    if length(first) == 0 {
        return none
    }
    if first[0] == token.keyword.foreach {
        token_stream_skip1(tokens)
        attrs = [vm.ast.attrs, paka_read_foreach_attrs(tokens, state)]
        idents = [paka_read_foreach_var(tokens, state)]
        while token_stream_peek(tokens)[0] == token.comma {
            token_stream_skip1(tokens)
            idents = idents ~ [paka_read_foreach_var(tokens, state)]
        }
        next = token_stream_read(tokens)
        if next != [token.op, ":"] {
            puts("error: expected colon after foreach's variable")
            exit
        }
        expr = paka_read_expr_base(tokens, state)
        block = paka_read_block(tokens, state)
        return [vm.ast.foreach, idents, expr, block, attrs]
    }
    if first[0] == token.keyword.static {
        token_stream_skip1(tokens)
        if token_stream_read(tokens)[0] != token.open.square {
            puts("expected `[` after `static`")
            exit
        }
        args = [vm.ast.static_array]
        while true {
            cur = token_stream_peek(tokens)
            if cur[0] == token.close.square {
                token_stream_skip1(tokens)
                return args
            }
            expr = paka_read_expr_base(tokens, state)
            args = args ~ [expr]
            if token_stream_peek(tokens)[0] == token.comma {
                token_stream_skip1(tokens)
            }
        } 
    }
    if first[0] == token.open.square {
        token_stream_skip1(tokens)
        args = [vm.ast.static_array]
        while true {
            cur = token_stream_peek(tokens)
            if cur[0] == token.close.square {
                token_stream_skip1(tokens)
                return args
            }
            expr = paka_read_expr_base(tokens, state)
            args = args ~ [expr]
            if token_stream_peek(tokens)[0] == token.comma {
                token_stream_skip1(tokens)
            }
        } 
    }
    if first[0] == token.open.paren {
        token_stream_skip1(tokens)
        ret = paka_read_expr_base(tokens, state)
        token_stream_skip1(tokens)
        return ret
    }
    if first[0] == token.keyword.true {
        token_stream_skip1(tokens)
        return [vm.ast.true] 
    }
    if first[0] == token.keyword.false {
        token_stream_skip1(tokens)
        return [vm.ast.false]
    }
    if first[0] == token.keyword.none {
        token_stream_skip1(tokens)
        return [vm.ast.none]
    }
    if first[0] == (token.num) {
        token_stream_skip1(tokens)
        return [vm.ast.num, first[1]]
    }
    if first[0] == (token.str) {
        token_stream_skip1(tokens)
        return [vm.ast.str, first[1]]
    }
    if first[0] == (token.ident) {
        token_stream_skip1(tokens)
        if str.eq(first[1], "exec") {
            return paka_read_call(tokens, [vm.ast.exec], state)
        } 
        if str.eq(first[1], "save") {
            return paka_read_call(tokens, [vm.ast.save], state)
        } 
        if str.eq(first[1], "putchar") {
            return paka_read_call(tokens, [vm.ast.putchar], state)
        } 
        if str.eq(first[1], "length") {
            return paka_read_call(tokens, [vm.ast.length], state)
        }
        if str.eq(first[1], "dump") {
            return paka_read_call(tokens, [vm.ast.dump], state)
        }
        if str.eq(first[1], "write") {
            return paka_read_call(tokens, [vm.ast.write], state)
        }
        if str.eq(first[1], "readc") {
            return paka_read_call(tokens, [vm.ast.readc], state)
        }
        if str.eq(first[1], "read") {
            return paka_read_call(tokens, [vm.ast.read], state)
        }
        if str.eq(first[1], "import") {
            return paka_read_call(tokens, [vm.ast.import], state)
        }
        if str.eq(first[1], "type") {
            return paka_read_call(tokens, [vm.ast.type], state)
        } 
        return [vm.ast.ident, first[1]]
    }
    puts("error: unexpected ")
    exit
}

def parse_is_not_in(op, some) {
    foreach ent: some {
        if str.eq(op, ent) {
            return false
        }
    }
    return true
}

def paka_read_expr(tokens, depth, state) {
    ops = state[0]
    if depth >= length(ops) {
        return paka_read_post(tokens, paka_read_single(tokens, state), state)
    }
    ret = paka_read_expr(tokens, depth + 1, state)
    while true {
        first = token_stream_peek(tokens)
        if length(first) == 0 {
            return ret
        }
        if first[0] != token.op {
            return ret
        }
        if parse_is_not_in(first[1], ops[depth]) {
            return ret
        }
        token_stream_skip1(tokens)
        ret = [vm.ast.op, first[1], ret, paka_read_expr(tokens, depth + 1, state)]
    }
}

def paka_read_expr_base(tokens, state) {
    ret = paka_read_expr(tokens, 0, state)
    return ret
}

def paka_read_stmt(tokens, state) {
    first = token_stream_peek(tokens)
    if first[0] == token.keyword.while {
        token_stream_skip1(tokens)
        expr = paka_read_expr_base(tokens, state)
        block = paka_read_block(tokens, state)
        return [vm.ast.while, expr, block]
    }
    if first[0] == token.keyword.def {
        token_stream_skip1(tokens)
        expr = paka_read_expr_base(tokens, state)
        block = paka_read_block(tokens, state)
        return [vm.ast.def, expr, block]
    }
    if first[0] == token.keyword.return {
        token_stream_skip1(tokens)
        expr = paka_read_expr_base(tokens, state)
        return [vm.ast.return, expr]
    }
    if first[0] == token.keyword.macro {
        token_stream_skip1(tokens)
        name = token_stream_read(tokens)
        block = paka_read_block(tokens, state)
        return [vm.ast.macro, [vm.ast.ident, name[1]], block]
    }
    if first[0] == token.keyword.when {
        token_stream_skip1(tokens)
        name = token_stream_read(tokens)
        exblockpr = paka_read_block(tokens, state)
        return [vm.ast.when, name, block]
    }
    if first[0] == token.keyword.exit {
        token_stream_skip1(tokens)
        return [vm.ast.exit]
    }
    if first[0] == token.keyword.if {
        token_stream_skip1(tokens)
        expr = paka_read_expr_base(tokens, state)
        block1 = paka_read_block(tokens, state)
        block2 = [vm.ast.do]
        first = token_stream_peek(tokens)
        if first[0] == token.keyword.else {
            token_stream_skip1(tokens)
            block2 = paka_read_block(tokens, state)
        }
        return [vm.ast.if, expr, block1, block2]
    }
    ret = paka_read_expr_base(tokens, state)
    return ret
}

def paka_read_block_body(tokens, state) {
    ret = [vm.ast.do]
    while true {
        first = token_stream_peek(tokens)
        if length(first) == 0 {
            return ret
        }
        if first[0] == token.close.curly {
            return ret
        }
        stmt = paka_read_stmt(tokens, state)
        ret = ret ~ [stmt]
    }
}

def paka_read_block(tokens, state) {
    first = token_stream_peek(tokens)
    if first[0] == token.open.curly {
        token_stream_skip1(tokens)
        ret = paka_read_block_body(tokens, state)
        token_stream_skip1(tokens)
        return ret
    }
    puts("parser: block error")
    exit
}

def paka_parse(src) {
    xstream = token_stream_new(src)
    ops = [["="], [":"], ["<", ">", "<=", ">=", "==", "!="], ["~", "+", "-"], ["%", "*", "/"], ["**"], ["@"]]
    state = [ops]
    ret = paka_read_block_body(xstream, state)
    return ret
}