
import("../lang/io.paka")
import("../lang/conv.paka")
import("../lang/file.paka")
import("../lang/stream.paka")
import("../lang/strs.paka")

import("../lang/findvar.paka")

import("macros.paka")
import("paka/all.paka")
import("pass/all.paka")
import("backend/emit.paka")

import("util/ast.paka")

import("check/check.paka")

def vm_exec(n, bc, rest) {
    i = 0
    while i < n {
        exec(bc, rest)
        i = i + 1
    }
}

def main(argv) {
    run = false
    outfile = none
    srcfile = none
    rest = []
    outlang = "vm"
    ntimes = 1
    i = 0
    while i < length(argv) {
        arg = argv[i]
        if run {
            rest = rest ~ [arg]
            i = i + 1
        } else {
            if arg[0] == '-' {
                if arg[1] == '-' {
                    run = true
                } 
                if arg[1] == 'o' {
                    i = i + 1
                    outfile = argv[i]
                }
                if arg[1] == 'l' {
                    i = i + 1
                    outlang = argv[i]
                }
                if arg[1] == 'q' {
                    puts("got -q flag, exiting")
                    exit
                }
                if arg[1] == 'r' {
                    i = i + 1
                    puts(read(argv[i]))
                    exit
                }
                if arg[1] == 'n' {
                    i = i + 1
                    ntimes = to_int(argv[i])
                }
                if arg[1] == 'e' {
                    i = i + 1
                    ast1 = paka_parse("none " ~ argv[i])
                    bc = emit(ast1, ['/'])
                    i = i + 1
                    while i < length(argv) {
                        rest = rest ~ [argv[i]]
                        i = i + 1
                    }
                    vm_exec(ntimes, bc, rest)
                    return none
                }
            } else {
                if srcfile != none {
                    puts("only one source can be provided")
                    exit
                }
                srcfile = arg
            }
            i = i + 1
        }
    }
    argv[0] = "-q"
    if srcfile == none {
        puts("no sources provided")
        exit
    }
    src = read(srcfile)
    if src == none {
        puts("cannot read file")
        exit
    }
    ast = paka_parse(src)
    ast = [vm.ast.do, ast, [vm.ast.call, [vm.ast.ident, "main"], [vm.ast.ident, "args"]]]
    if outfile == none {
        if outlang == "bc" {
            outfile = "exec.bc"
        }
        if outlang == "vm" {
            outfile = "save.vm"
        }
    }
    if run {
        bc = emit(ast, srcfile)
        vm_exec(ntimes, bc, rest)
        exit
    } else {
        if outlang == "bc" {
            bc = emit(ast, srcfile)
            dump(outfile, bc)
            exit
        } 
        if outlang == "vm" {
            ast0 = [vm.ast.do, [vm.ast.save, [vm.ast.str, outfile]], ast]
            bc = emit(ast0, srcfile)
            if ntimes != 1 {
                dump(outfile, bc)
            }
            exec(bc, [])
            exit
        }
        puts("invalid format: -l" ~ outlang)
        exit
    }
}
